---
export interface Props {
  href: string;
  isSelected?: boolean;
  tabId: string;
}

const { href, isSelected = false, tabId } = Astro.props;
---
<!--TODO: Ajustar los colores con relaciÃ³n al tema de la app -->
<a 
  id={tabId}
  href={href}
  class={`tab p-3 relative text-lg text-gray-700 after:absolute after:bottom-[-2px] after:left-0 after:h-0.5 after:w-0 after:bg-primary-600 after:transition-all after:duration-300 hover:after:w-full`}
  data-selected={isSelected ? 'true' : 'false'}
>
  <slot />
  <div class={`after absolute bottom-[-2px] left-0 h-0.5 transition-all duration-300 ${isSelected ? 'w-full bg-primary-600' : 'w-0 bg-primary-600'}`}></div>
</a>

<script>
  const tabs = document.querySelectorAll<HTMLAnchorElement>('.tab');
  
  tabs.forEach(tab => {
    tab.addEventListener('click', function(this: HTMLAnchorElement, e: MouseEvent) {
      e.preventDefault();
      
      tabs.forEach(t => {
        t.classList.remove('font-semibold');
        t.classList.remove('text-primary-600');
        t.classList.add('text-gray-700');
        t.setAttribute('data-selected', 'false');
        
        const indicator = t.querySelector<HTMLDivElement>('.after');
        if (indicator) {
          indicator.classList.remove('w-full');
          indicator.classList.add('w-0');
        }
      });
      
      this.classList.remove('text-gray-700');
      this.classList.add('font-semibold');
      this.classList.add('text-primary-600');
      this.setAttribute('data-selected', 'true');
      
      const currentIndicator = this.querySelector<HTMLDivElement>('.after');
      if (currentIndicator) {
        currentIndicator.classList.remove('w-0');
        currentIndicator.classList.add('w-full');
      }
      
      const event = new CustomEvent('tabSelected', { 
        detail: { tabId: this.id },
        bubbles: true 
      });
      this.dispatchEvent(event);
    });
  });
</script>